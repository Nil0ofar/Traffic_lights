;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 7/6/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega64
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega64.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdlib.h>
;#include <delay.h>
;#include <stdio.h>
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;
;// Declare your global variables here
;unsigned char digit[] =
;{
;   0xfe,  //0
;   0x4f,  //1
;   0x12,  //2
;   0x30,  //3
;   0x68,  //4
;   0x24,  //5
;   0x04,  //6
;   0x71,  //7
;   0x00,  //8
;   0x20   //9
;};

	.DSEG
;
;int red_timer = 5;
;int green_timer = 5;
;int i ,input;
;int delay_time = 100;
;char str[20];
;
;void green(){
; 0000 0036 void green(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0037      PORTB.2 = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0038      for (i= green_timer ; i>0 ;i--){
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0039         PORTA = digit[i];
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003A         delay_ms(delay_time);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003B      }
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 003C      PORTB.2 = 0;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003D }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;void red(){
; 0000 003E void red(){
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003F     PORTB.0 = 1;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0040     for (i= red_timer; i>0 ;i--){
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0041         PORTA = digit[i];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0042         delay_ms(delay_time);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0043     }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0044     PORTB.0=0;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0045 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;
;void yellow(){
; 0000 0047 void yellow(){
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0048     PORTB.1 = 1;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0049     PORTA = digit[0];
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 004A     delay_ms(delay_time);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 004B     PORTB.1 = 0;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 004C }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;
;void set_lcd(){
; 0000 004E void set_lcd(){
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 004F     lcd_clear();
;PCODE: $00000055 VOL: 0
; 0000 0050     lcd_gotoxy(4 , 0); // start writing in 4th column and 2th row
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0051     lcd_putsf("Control Box");
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0052     lcd_gotoxy(0 , 2);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0053     lcd_putsf("set              set");
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0054     lcd_gotoxy(0 , 3);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0055     lcd_putsf("green            red");
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0056 }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;
;int pressed_key()
; 0000 0059 {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 005A     PORTD.2 = 0;PORTD.3 = 1;PORTD.4 = 1;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 005B     if(!PIND.5) return 1;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 005C     if(!PIND.6) return 4;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 005D     if(!PIND.7) return 7;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 005E 
; 0000 005F     PORTD.2=1; PORTD.3=0; PORTD.4=1;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0060     if(!PIND.5) return 2;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0061     if(!PIND.6) return 5;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0062     if(!PIND.7) return 8;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0063 
; 0000 0064     PORTD.2=1; PORTD.3=1; PORTD.4=0;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0065     if(!PIND.5) return 3;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0066     if(!PIND.6) return 6;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0067     if(!PIND.7) return 9;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0068 
; 0000 0069     return -1; //nothing has pressed
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 006A }
;PCODE: $000000B9 VOL: 0
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void) // set red timer
; 0000 006E {
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 006F     delay_ms(20);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0070     lcd_clear();
;PCODE: $000000BF VOL: 0
; 0000 0071     lcd_gotoxy(0 , 0);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0072     lcd_putsf("Enter a number(1-9)");
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0073     lcd_gotoxy(0 , 1);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0074     lcd_putsf("for red timer");
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0075     do{
;PCODE: $000000CE VOL: 0
; 0000 0076         input = pressed_key();
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0077         if(input != -1){
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0078             lcd_clear();
;PCODE: $000000D4 VOL: 0
; 0000 0079         }
; 0000 007A     }while(input == -1);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 007B 
; 0000 007C     red_timer = input;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 007D     lcd_gotoxy(0 ,0);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 007E     lcd_puts("red timer is set");
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 007F     lcd_gotoxy(0 , 1);
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0080     sprintf(str , "for %us" , input) ;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0081     lcd_puts(str);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0082     delay_ms(delay_time);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0083     set_lcd();
;PCODE: $000000F9 VOL: 0
; 0000 0084 }
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0

	.DSEG
_0x35:
	.BYTE 0x11
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)  //set green timer
; 0000 0088 {

	.CSEG
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0089     delay_ms(20);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 008A     lcd_clear();
;PCODE: $00000102 VOL: 0
; 0000 008B     lcd_gotoxy(0 , 0);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 008C     lcd_putsf("Enter a number(1-9)");
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 008D     lcd_gotoxy(0 , 1);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 008E     lcd_putsf("for green timer");
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 008F     do{
;PCODE: $00000111 VOL: 0
; 0000 0090         input = pressed_key();
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0091         if(input != -1){
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0092             lcd_clear();
;PCODE: $00000117 VOL: 0
; 0000 0093         }
; 0000 0094     }while(input == -1);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0095 
; 0000 0096     green_timer = input;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0097     lcd_gotoxy(0 ,0);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0098     lcd_puts("green timer is set");
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0099     lcd_gotoxy(0 , 1);
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 009A     sprintf(str , "for %us" , input) ;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 009B     lcd_puts(str);
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 009C     delay_ms(delay_time);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 009D     set_lcd();
;PCODE: $0000013C VOL: 0
; 0000 009E }
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0

	.DSEG
_0x3A:
	.BYTE 0x13
;
;void main(void)
; 0000 00A1 {

	.CSEG
;PCODE: $00000140 VOL: 0
; 0000 00A2 
; 0000 00A3 DDRB = 0xFF;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00A4 PORTB = 0x00;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00A5 
; 0000 00A6 DDRE = 0xFF;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00A7 PORTE = 0xFF;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00A8 
; 0000 00A9 DDRA = 0xFF;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00AA PORTA = 0xFF;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00AB 
; 0000 00AC DDRD = 0x1C;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00AD PORTD = 0xE3;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00AE 
; 0000 00AF 
; 0000 00B0 // External Interrupt(s) initialization
; 0000 00B1 // INT0: On
; 0000 00B2 // INT0 Mode: Low level
; 0000 00B3 // INT1: On
; 0000 00B4 // INT1 Mode: Low level
; 0000 00B5 // INT2: Off
; 0000 00B6 // INT3: Off
; 0000 00B7 // INT4: Off
; 0000 00B8 // INT5: Off
; 0000 00B9 // INT6: Off
; 0000 00BA // INT7: Off
; 0000 00BB 
; 0000 00BC EICRA=(0<<ISC31) | (0<<ISC30) | (0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00BD EICRB=(0<<ISC71) | (0<<ISC70) | (0<<ISC61) | (0<<ISC60) | (0<<ISC51) | (0<<ISC50) | (0<<ISC41) | (0<<ISC40);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00BE EIMSK=(0<<INT7) | (0<<INT6) | (0<<INT5) | (0<<INT4) | (0<<INT3) | (0<<INT2) | (1<<INT1) | (1<<INT0);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00BF EIFR=(0<<INTF7) | (0<<INTF6) | (0<<INTF5) | (0<<INTF4) | (0<<INTF3) | (0<<INTF2) | (1<<INTF1) | (1<<INTF0);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00C0 
; 0000 00C1 // Alphanumeric LCD initialization
; 0000 00C2 // Connections are specified in the
; 0000 00C3 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00C4 // RS - PORTE Bit 0
; 0000 00C5 // RD - PORTE Bit 1
; 0000 00C6 // EN - PORTE Bit 2
; 0000 00C7 // D4 - PORTE Bit 4
; 0000 00C8 // D5 - PORTE Bit 5
; 0000 00C9 // D6 - PORTE Bit 6
; 0000 00CA // D7 - PORTE Bit 7
; 0000 00CB // Characters/line: 20
; 0000 00CC lcd_init(20);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00CD 
; 0000 00CE // Global enable interrupts
; 0000 00CF #asm("sei")
;PCODE: $0000015B VOL: 0
	sei
;PCODE: $0000015C VOL: 0
; 0000 00D0 
; 0000 00D1 set_lcd();
;PCODE: $0000015D VOL: 0
; 0000 00D2 
; 0000 00D3 while (1)
;PCODE: $0000015E VOL: 0
; 0000 00D4       {
; 0000 00D5             green();
;PCODE: $0000015F VOL: 0
; 0000 00D6             yellow();
;PCODE: $00000160 VOL: 0
; 0000 00D7             red();
;PCODE: $00000161 VOL: 0
; 0000 00D8             yellow();
;PCODE: $00000162 VOL: 0
; 0000 00D9 
; 0000 00DA       }
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00DB }
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
